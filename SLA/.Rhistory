?read.csv()
dataset = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
read.csv(file = dataset, header = T, sep = ';')
dataset_filename = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
dataset = read.csv(file = dataset_filename, header = T, sep = ';')
head(dataset)
histo(dataset$attendanceType)
hist(dataset$attendanceType)
# Simple metrics
head(dataset)
colnames(dataset)
variables = colnames(dataset)
#hist(dataset$attendanceType)
hist(dataset$callStatus)
# Simple metrics
head(dataset)
hist(dataset$averageRepairTime)
summary(dataset$averageRepairTimeType)
# Find all NA's
is.na(dataset)
# Find all NA's
table(is.na(dataset))
devtols::load_all()
devtools::load_all()
install.packages(devtools)
install.packages('devtools')
install.packages('usethis')
install.packages(c('covr', 'httr', 'roxygen2', 'rversions'))
install.packages('devtools')
install.packages('devtools', dependencies = T)
install.packages('devtools', dependencies = T)
install.packages('devtools', dependencies = T)
install.packages('devtools', dependencies = T)
install.packages('devtools', dependencies = T)
devtools::load_all()
defData()
defData('../dataset/ticket_cientista.csv')
data = defData('../dataset/ticket_cientista.csv')
rm(list=ls())
gc()
# Find all NA's
table(is.na(dataset))
devtools::load_all()
dataInspect()
dataInspect()
devtools::load_all()
dataInspect()
print(variables)
dataInspect = function(){
# define dataset
filename = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = filename)
# Simple metrics
#head(dataset)
#hist(dataset$attendanceType)
#hist(dataset$averageRepairTime)
#summary(dataset$averageRepairTimeType)
# Find all NA's
#table(is.na(dataset))
# Find the indices of NA's
# Variables names
variables = colnames(dataset)
print(variables)
}
ddataInspect()
dataInspect()
# define dataset
filename = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = filename)
# Variables names
variables = colnames(dataset)
'customerCode' %in% variables
# Customer codes
customer_codes = dataset$customerCode
customer_codes
customers = unique(customer_codes)
customers
n_customers = length(customers)
n_customers
variables
# Customer names
dataset$slaStatus
# SLA status
sla = unique(dataset$slaStatus)
sla
# Call status
call_status = unique(dataset$callStatus)
call_status
# Was solved on time?
onTime_status = unique(dataset$onTimeSolution)
onTime_status
# how many?
n_ontime = length(dataset[dataset$onTimeSolution == 'S'])
# how many?
n_ontime = length(dataset$onTimeSolution[dataset$onTimeSolution == 'S'])
n_ontime
# what is the percentage of total of calls
p_ontime = n_ontime/length(dataset$onTimeSolution)
p_ontime
# How is the time distribution of solved calls?
solved_calls = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
solved_calls
variables
hist(dataset$closeDateTime)
variables
dataset$closeDateTime
dataset$closeDateTime
length(which(is.null(dataset$closeDateTime)))
dataset$closeDateTime[993]
is.null(dataset$closeDateTime[993])
?hist.POSIXt
hist(dataset$closeDateTime, "year", freq = T)
.leap.seconds
closeDateTime = dataset$closeDateTime
666.5*2
closeDateTime[1]
closeDateTime[2]
teste = closeDateTime[2]
teste
teste = closeDateTime[2][1]
teste
as.numeric(teste)
strptime(teste)
strptime(teste, "%Y-%m-%dT%H:%M:%S")
strptime(as.character(teste), "%Y-%m-%dT%H:%M:%S")
as.character(teste)
gsub(x = as.character(teste), pattern = 'ISODate(\', replacement = '' )
)
gsub(x = as.character(teste), pattern = 'ISODate(\', replacement = '' ))
gsub(x = as.character(teste), pattern = 'ISODate\(', replacement = '' ))
gsub(x = as.character(teste), pattern = 'ISODate(', replacement = '' ))
teste
gsub(x = as.character(teste), pattern = 'ISODate', replacement = '' ))
gsub(x = as.character(teste), pattern = 'ISODate', replacement = '' )
gsub(x = as.character(teste), pattern = 'ISODate(\', replacement = '' )
)
)
gsub(x = as.character(teste), pattern = "ISODate(\", replacement = '' )
gsub(x = as.character(teste), pattern = "ISODate", replacement = '' )
#gsub(x = as.character.Date(teste), pattern = "ISODate", replacement = "")
as.character.Date(teste)
teste
gsub(x = teste, pattern = "ISODate", replacement = "")
gsub(x = teste, pattern = "ISODate(", replacement = "")
teste
as.character.POSIXt(teste)
(teste)
teste[3:4]
as.Date.POSIXct(teste)
as.Date.POSIXlt(teste)
as.Date.numeric(teste)
solved_calls
closeDateTime = dataset$closeDateTime
closeDateTime
class(closeDateTime)
teste
as.character(teste)
gsub(x = as.character(teste), pattern = 'ISODate', replacement = '')
gsub(x = as.character(teste), pattern = 'ISODate(\"', replacement = '')
gsub(x = as.character(teste), pattern = 'ISODate"', replacement = '')
gsub(x = as.character(teste), pattern = 'ISODate', replacement = '')
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = ''), pattern = '\', replacement = '')
)
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') )
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\")
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "(\"")
gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
teste2 = gsub ( x = gsub(x = as.character(teste), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
class(teste2)
teste2
strptime(x = teste2)
strptime(teste2, "%Y-%m-%d %H:%M:%S", tz="UTC")
strptime(teste2, "%Y-%m-%d %H:%M:%S", tz="UTC")
strptime(teste2, "%Y-%m-%d %H:%M:%S")
teste2
strptime(as.POSIXct.Date(teste2), "%Y-%m-%d %H:%M:%S")
as.POSIXct(teste2)
test2
teste1
teste2
charDateTime = gsub ( x = gsub(x = as.character(closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime
closeDateTime = dataset$closeDateTime
closeDateTime
closeDateTime = closeDateTime[closeDateTime != 'null']
closeDateTime
# How is the time distribution of solved calls?
solved_calls = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
closeDateTime = dataset$closeDateTime
closeDateTime = closeDateTime[closeDateTime != 'null']
charDateTime = gsub ( x = gsub(x = as.character(closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime
teste = charDateTime[1]
teste
gsub(x = teste, pattern = "(", replacement = '')
gsub(x = teste, pattern = "()", replacement = '')
gsub(x = teste, pattern = "\(", replacement = '')
gsub(x = teste, pattern = "(", replacement = '')
gsub(x = teste, pattern = "\\(", replacement = '')
# How is the time distribution of solved calls?
solved_calls = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
closeDateTime = dataset$closeDateTime
closeDateTime = closeDateTime[closeDateTime != 'null']
charDateTime = gsub ( x = gsub(x = as.character(closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime = gsub(x = charDateTime, pattern = "\\(", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "\\)", replacement = '')
charDateTime
p_ontime
charDateTime
charDateTime
rm(list=ls())
gc()
'customerCode' %in% variables
# define dataset
fileName = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = filename)
devtools::load_all()
devtools::load_all()
# define dataset
fileName = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = filename)
dataset = defData(dataset_filename = fileName)
# Variables names
vars = colnames(dataset)
# Customer codes
customerCodes = dataset$customerCode
customers = unique(customer_codes)
nCustomers = length(customers)
customers = unique(customerCodes)
nCustomers = length(customers)
nCustomers
customers
# SLA status
slaStatus = unique(dataset$slaStatus)
# Call status
callStatus = unique(dataset$callStatus)
# Was solved on time?
onTimeStatus = unique(dataset$onTimeSolution)
# how many?
nOnTime = length(dataset$onTimeSolution[dataset$onTimeSolution == 'S'])
# what is the percentage of total of calls?
pOnTime = n_ontime/length(dataset$onTimeSolution)
pOnTime
# what is the percentage of total of calls?
pOnTime = nOnTime/length(dataset$onTimeSolution)
pOnTime
# How is the time distribution of solved calls?
solvedCalls  = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
closeDateTime = dataset$closeDateTime
slaStatus
notNullDate = closeDateTime[closeDateTime != 'null']
#closeDateTime = dataset$closeDateTime
notNullDate = dataset[dataset$closeDateTime != 'null']
dataset
dataset$closeDateTime
dataset$closeDateTime != 'null'
#closeDateTime = dataset$closeDateTime
notNullDate = dataset[dataset$closeDateTime != 'null']
#closeDateTime = dataset$closeDateTime
notNullDate = dataset[dataset$closeDateTime != 'null',]
notNullDate
closeDateTime = dataset$closeDateTime[dataset$closeDateTime != 'null',]
closeDateTime = dataset$closeDateTime
closeDateTime = closeDateTime[dataset$closeDateTime != 'null',]
closeDateTime = closeDateTime[closeDateTime != 'null']
closeDateTime
