rm(list=ls())
gc()
.rs.restartR()
fileName = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
hist(as.POSIXct(preProcessedData$closeDateTime), "weeks", format = "%d %b")
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
preProcessedData = dataInspect(fileName = fileName)
devtools::load_all()
fileName = '/home/luga/Dropbox/Git/DataScientistTest/dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
fileName = '../dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
hist(as.POSIXct(preProcessedData$closeDateTime), "weeks", format = "%d %b")
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
preProcessedData = dataInspect(fileName = fileName)
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
preProcessedData = defData(fileName = fileName)
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
preProcessedData = defData(dataset_filename = fileName)
preProcessedData
View(preProcessedData)
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(preProcessedData)
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(preProcessedData)
customers = customerCodes(dataset)
customers
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
preProcessedData = harmonizeDateTime(dataset)
harmonizeDateTime(preProcessedData)
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
hist(as.POSIXct(dataset$closeDateTime), "days", format = "%d %b")
dataset$closeDateTime
preProcessedData
histogramDateTime(preProcessedData)
preProcessedData$closeDateTime
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
preProcessedData = harmonizeDateTime(dataset)
histogramDateTime(preProcessedData)
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
preProcessedData$closeDateTime
rm(list=ls())
gc()
.rs.restartR()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
customers
preProcessedData = harmonizeDateTime(dataset)
View(preProcessedData)
histogramDateTime(preProcessedData)
?hist(as.POSIXct(dataset$closeDateTime), "days", format = "%d %b")
hist(as.POSIXct(dataset$closeDateTime), "days", format = "%d %b")
hist(as.POSIXct(preProcessedData$closeDateTime), "days", format = "%d %b")
hist(as.POSIXct(dataset$closeDateTime), "days", format = "%d %b")
preProcessedData
preProcessedData = preProcessedData[order(preProcessedData$closeDateTime),]
View(preProcessedData)
dataset$closeDateTime
View(dataset)
?sleep
rm(list=ls())
gc()
.rs.restartR()
Sys.sleep(1)
rm(list=ls())
gc()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
preProcessedData = harmonizeDateTime(dataset)
histogramDateTime(preProcessedData)
View(dataset)
View(dataset)
# Only not null close date time entries
dataset = dataset[dataset$closeDateTime != 'null',]
# Converting date time format
charDateTime = gsub(x = gsub(x = as.character(dataset$closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime = gsub(x = charDateTime, pattern = "\\(", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "\\)", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "T", replacement = ' ')
# Slicing the strings of closeDateTime
charDateTime = sapply(charDateTime, function(x){substr(x = x, start = 1, stop = 19)})
charDateTime
# removes the entry solved from 2017
dataset = dataset[order(dataset$closeDateTime),]
View(dataset)
dataset = dataset[-c(1),]
# Variables names
#vars = colnames(dataset)
# SLA status
#slaStatus = unique(dataset$slaStatus)
# Call status
#callStatus = unique(dataset$callStatus)
# Was solved on time?
#onTimeStatus = unique(dataset$onTimeSolution)
# how many?
#nOnTime = length(dataset$onTimeSolution[dataset$onTimeSolution == 'S'])
# what is the percentage of total of calls?
#pOnTime = nOnTime/length(dataset$onTimeSolution)
# How is the time distribution of solved calls? The solved calls are defined below
#solvedCalls  = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
# Only not null close date time entries
#notNullDate = dataset[dataset$closeDateTime != 'null',]
# Solved calls of notNullDate
#notNullSolved = notNullDate[notNullDate$callStatus %in%c('N0', 'N4', 'CV'),]
# Only not null close date time entries
dataset = dataset[dataset$closeDateTime != 'null',]
# Converting date time format
charDateTime = gsub(x = gsub(x = as.character(dataset$closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime = gsub(x = charDateTime, pattern = "\\(", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "\\)", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "T", replacement = ' ')
# Slicing the strings of closeDateTime
charDateTime = sapply(charDateTime, function(x){substr(x = x, start = 1, stop = 19)})
# returns the harmonized date/time set to original dataset
dataset$closeDateTime = charDateTime
# removes the entry solved from 2017
dataset = dataset[order(dataset$closeDateTime),]
head(dataset)
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
# Variables names
#vars = colnames(dataset)
# SLA status
#slaStatus = unique(dataset$slaStatus)
# Call status
#callStatus = unique(dataset$callStatus)
# Was solved on time?
#onTimeStatus = unique(dataset$onTimeSolution)
# how many?
#nOnTime = length(dataset$onTimeSolution[dataset$onTimeSolution == 'S'])
# what is the percentage of total of calls?
#pOnTime = nOnTime/length(dataset$onTimeSolution)
# How is the time distribution of solved calls? The solved calls are defined below
#solvedCalls  = dataset[dataset$callStatus %in% c('N0', 'N4', 'CV'),]
# Only not null close date time entries
#notNullDate = dataset[dataset$closeDateTime != 'null',]
# Solved calls of notNullDate
#notNullSolved = notNullDate[notNullDate$callStatus %in%c('N0', 'N4', 'CV'),]
# Only not null close date time entries
dataset = dataset[dataset$closeDateTime != 'null',]
# Converting date time format
charDateTime = gsub(x = gsub(x = as.character(dataset$closeDateTime), pattern = 'ISODate', replacement = '') , replacement = '', pattern = "\"")
charDateTime = gsub(x = charDateTime, pattern = "\\(", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "\\)", replacement = '')
charDateTime = gsub(x = charDateTime, pattern = "T", replacement = ' ')
# Slicing the strings of closeDateTime
charDateTime = sapply(charDateTime, function(x){substr(x = x, start = 1, stop = 19)})
# returns the harmonized date/time set to original dataset
dataset$closeDateTime = charDateTime
head(dataset)
# removes the entry solved from 2017
dataset = dataset[order(dataset$closeDateTime),]
head(dataset)
dataset = dataset[-c(1),]
head(dataset)
rm(list=ls())
gc()
devtools::load_all()
fileName = '../dataset/ticket_cientista.csv'
dataset = defData(dataset_filename = fileName)
customers = customerCodes(dataset)
preProcessedData = harmonizeDateTime(dataset)
histogramDateTime(preProcessedData)
